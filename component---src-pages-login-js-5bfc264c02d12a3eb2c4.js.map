{"version":3,"sources":["webpack:///./src/components/Hooks/useForm.js","webpack:///./src/pages/login.js","webpack:///./src/firebase/auth.js"],"names":["useForm","callback","validate","useState","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","Object","keys","length","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","LoginPage","location","loading","setLoading","apiError","setApiError","useContext","AuthContext","updateToken","token","user","setUser","navigate","email","password","firebase","auth","signInWithEmailAndPassword","then","userCredential","JSON","parse","stringify","stsTokenManager","refreshToken","catch","e","console","log","Layout","style","padding","SEO","title","Header","as","Form","onSubmit","error","entries","Array","isArray","Message","header","content","map","detail","key","status","handleErrors","Segment","Field","htmlFor","Input","id","fluid","type","autoFocus","onChange","data-testid","color","Button","test"],"mappings":"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","file":"component---src-pages-login-js-5bfc264c02d12a3eb2c4.js","sourcesContent":["// Credit to https://upmostly.com/tutorials/using-custom-react-hooks-simplify-forms/\n\nimport {useState, useEffect} from 'react'\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({})\n  const [errors, setErrors] = useState({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback()\n    }\n  }, [errors])\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault()\n    setIsSubmitting(true)\n    setErrors(validate(values))\n  }\n\n  const handleChange = event => {\n    event.persist()\n    setValues(values => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }))\n  }\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  }\n}\n\nexport default useForm\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable no-use-before-define */\n\nimport React, { useState, useEffect, useContext } from 'react'\nimport { navigate } from 'gatsby'\nimport { Header, Form, Input, Button, Segment, Message } from 'semantic-ui-react'\nimport SEO from '../components/SEO'\nimport { login } from '../../lib/moltin'\nimport AuthContext from '../components/Context/AuthContext'\nimport Layout from '../components/Layout'\nimport useForm from '../components/Hooks/useForm'\nimport firebase from \"gatsby-plugin-firebase\"\nimport { signInWithEmailAndPassword } from '../firebase/auth'\n\nconst LoginPage = ({ location }) => {\n\n  const [loading, setLoading] = useState(false)\n  const [apiError, setApiError] = useState([])\n\n  const { token, updateToken, user, setUser} = useContext(AuthContext)\n\n\n  const formLogin = () => {\n\n\n\n    setLoading(true)\n    signInWithEmailAndPassword(values.email, values.password)\n      .then((userCredential) => {\n      // Signed in\n      setUser(userCredential)\n      updateToken(JSON.parse(JSON.stringify(userCredential)).user.stsTokenManager.refreshToken)\n      navigate('/myaccount/')\n\n\n      // ...\n    })\n  .catch((e) => {\n    console.log(e)\n    setLoading(false)\n    setApiError(e.errors || e)\n  });\n\n\n  }\n\n\n\n\nuseEffect(() => {\n  if(user) {\n    navigate('/myaccount')\n  }\n\n}, [user])\n\n\n\n\nconst { values, handleChange, handleSubmit, errors } = useForm(\n  formLogin,\n  validate,\n)\n\nconst handleErrors = errors => {\n  if (!Array.isArray(errors) && !errors.length > 0) {\n    return (\n      <Message\n        error\n        header=\"Sorry\"\n        content=\"Please check your login details and try again.\"\n      />\n    )\n  }\n  return errors.map(e => (\n    <Message error header={e.title} content={e.detail} key={e.status} />\n  ))\n}\nreturn (\n  <Layout location={location}>\n    <div style={{ padding: '100px' }}>\n      <SEO title=\"Login\" />\n      <Header as=\"h1\">Log in to your account</Header>\n      <Form\n        onSubmit={handleSubmit}\n        loading={loading}\n        error={apiError.length !== 0 || Object.entries(errors).length !== 0}\n      >\n        {apiError.length !== 0 ? handleErrors(errors) : null}\n        <Segment>\n          <Form.Field>\n            <label htmlFor=\"email\">Email</label>\n            <Input\n              id=\"email\"\n              fluid\n              name=\"email\"\n              type=\"email\"\n              autoFocus\n              onChange={handleChange}\n              value={values.email || ''}\n            />\n          </Form.Field>\n          {errors.email && (\n            <p data-testid=\"error\" style={{ color: 'red' }}>\n              {errors.email}\n            </p>\n          )}\n          <Form.Field>\n            <label htmlFor=\"password\">Password</label>\n            <Input\n              id=\"password\"\n              fluid\n              name=\"password\"\n              type=\"password\"\n              value={values.password || ''}\n              onChange={handleChange}\n            />\n          </Form.Field>\n          {errors.password && <p style={{ color: 'red' }}>{errors.password}</p>}\n          <Button type=\"submit\" color=\"#4b00a1\">\n            Login\n          </Button>\n        </Segment>\n      </Form>\n    </div>\n  </Layout>\n)\n}\n\nexport default LoginPage\n\nconst validate = values => {\n  const errors = {}\n  if (!values.email) {\n    errors.email = 'Email address is required'\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = 'Email address is invalid'\n  }\n  if (!values.password) {\n    errors.password = 'Password is required'\n  }\n  return errors\n}\n","\nimport firebase from 'gatsby-plugin-firebase'\n// Sign Up\nexport const doCreateUserWithEmailAndPassword = (email, password) =>\n  firebase.auth().createUserWithEmailAndPassword(email, password);\n\n// Sign In\nexport const signInWithEmailAndPassword = (email, password) =>\n  firebase.auth().signInWithEmailAndPassword(email, password);\n\n// Sign out\nexport const doSignOut = () =>\n  auth.signOut();\n\n// Password Reset\nexport const doPasswordReset = (email) =>\n  auth.sendPasswordResetEmail(email);\n\n// Password Change\nexport const doPasswordUpdate = (password) =>\n  auth.currentUser.updatePassword(password);"],"sourceRoot":""}