{"version":3,"sources":["webpack:///./src/pages/cart_example.js"],"names":["Moltin","require","loadStripe","CartExample","location","useState","setLoading","setItems","setMeta","setCartId","useContext","CartContext","updateCartCount","a","localStorage","getItem","cartIdLocal","console","log","getCartItems","then","data","meta","useEffect","Layout","SEO","title","style","paddingTop"],"mappings":"yTAQMA,EAASC,EAAQ,QAYDC,YAAW,+GA6FlBC,UA3FK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAEJC,oBAAS,GAAvBC,GAFkB,aAGRD,mBAAS,IAArBE,GAHoB,aAIAF,oBAAS,GAJT,aAKVA,mBAAS,KAApBG,GALqB,aAMNH,mBAAS,IAAtBI,GANmB,WAONC,qBAAWC,KAA/BC,gBAP0B,4CAalC,4BAAAC,EAAA,sEAC8BC,aAAaC,QAAQ,SADnD,cACUC,EADV,OAEIC,QAAQC,IAAIF,GAFhB,SAGUhB,EAAOmB,aAAaH,GAAaI,MAAK,YAAqB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACjDL,QAAQC,IAAIG,GACZd,EAASc,GACTZ,EAAUO,GACVR,EAAQc,GACRhB,GAAW,MARnB,4CAbkC,sBAyBlCiB,qBAAU,YAzBwB,mCA0B9BJ,KACD,IAwDH,OAAQ,kBAACK,EAAA,EAAD,CAAQpB,SAAUA,GACtB,kBAACqB,EAAA,EAAD,CAAKC,MAAM,iBACX,wBAAIC,MAAO,CAAEC,WAAY,SAAzB,iBACL,uBAAC,EAAD","file":"component---src-pages-cart-example-js-6469f51a5d5a6e4d9359.js","sourcesContent":["import React, { useState, useContext, useEffect, componentDidMount } from 'react'\nimport CartItemList from '../components/CartItemList'\nimport CartSummary from '../components/CartSummary'\nimport CartContext from '../components/Context/CartContext'\n\n\nimport { Location } from '@reach/router';\n\nconst Moltin = require('../../lib/moltin')\n\nimport Layout from '../components/Layout'\nimport SEO from '../components/SEO'\n\nimport Skus from '../components/Products/Skus'\nimport CartOverview from '../components/CartOverview'\n\nimport { loadStripe } from '@stripe/stripe-js'\nimport { CartProvider } from 'use-shopping-cart'\nimport { StripeCartProviderParent } from '../components/StripeCartProviderParent';\n\nconst stripePromise = loadStripe(\"pk_test_51IGhToG3l6YaloTgAakGvMYVjrveEMs7oFJF7akytn6gyne2Lq0GDYmAYxh0iqFMPIclDMwQ1PtGqhq26WvwHYGw001BbrEVn0\")\n\nconst CartExample = ({ location }) => {\n\n    const [loading, setLoading] = useState(true)\n    const [items, setItems] = useState([])\n    const [completed, setCompleted] = useState(false)\n    const [meta, setMeta] = useState({})\n    const [cartId, setCartId] = useState({})\n    const { updateCartCount } = useContext(CartContext)\n\n\n\n\n\n    async function getCartItems() {\n        const cartIdLocal = await localStorage.getItem('mcart')\n        console.log(cartIdLocal)\n        await Moltin.getCartItems(cartIdLocal).then(({ data, meta }) => {\n            console.log(data)\n            setItems(data)\n            setCartId(cartIdLocal)\n            setMeta(meta)\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        getCartItems()\n    }, [])\n\n    const handleCheckout = async data => {\n        const cartId = await localStorage.getItem('mcart')\n        const customerId = localStorage.getItem('mcustomer')\n\n        const {\n            id: token,\n            email,\n            card: {\n                name,\n                address_line1: line_1,\n                address_city: city,\n                address_country: country,\n                address_state: county,\n                address_zip: postcode,\n            },\n        } = data\n\n        const customer = customerId || { name, email }\n\n        const address = {\n            first_name: name.split(' ')[0],\n            last_name: name.split(' ')[1] || '',\n            line_1,\n            city,\n            county: county || '',\n            country,\n            postcode,\n        }\n\n        try {\n            const {\n                data: { id },\n            } = await Moltin.checkoutCart(cartId, customer, address)\n            await Moltin.payForOrder(id, token, email)\n            setCompleted(true)\n            updateCartCount(0, cartId)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const handleRemoveFromCart = itemId => {\n        Moltin.removeFromCart(itemId, cartId).then(({ data, meta }) => {\n            const total = data.reduce((a, c) => a + c.quantity, 0)\n            updateCartCount(total, cartId)\n            setItems(data)\n            setMeta(meta)\n        })\n    }\n\n    const rest = { completed, items, loading, cartId }\n\n\n\n    return (<Layout location={location}>\n        <SEO title=\"Cart Example\" />\n        <h1 style={{ paddingTop: '60px' }}>Cart Overview</h1>\n   <StripeCartProviderParent />\n    </Layout>\n    )\n}\n\nexport default CartExample\n"],"sourceRoot":""}