{"version":3,"sources":["webpack:///./src/pages/cart.js"],"names":["Moltin","require","Cart","location","useState","loading","setLoading","items","setItems","completed","setCompleted","meta","setMeta","cartId","setCartId","updateCartCount","useContext","CartContext","a","localStorage","getItem","cartIdLocal","getCartItems","then","data","useEffect","handleCheckout","customerId","token","id","email","card","name","line_1","address_line1","city","address_city","country","address_country","county","address_state","postcode","address_zip","customer","address","first_name","split","last_name","checkoutCart","payForOrder","console","log","rest","style","padding","title","removeFromCart","item","itemId","total","reduce","c","quantity"],"mappings":"+OAQMA,EAASC,EAAQ,QA6FRC,UA3FF,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACGC,oBAAS,GAAhCC,EADoB,KACXC,EADW,OAEDF,mBAAS,IAA5BG,EAFoB,KAEbC,EAFa,OAGOJ,oBAAS,GAApCK,EAHoB,KAGTC,EAHS,OAIHN,mBAAS,IAA1BO,EAJoB,KAIdC,EAJc,OAKCR,mBAAS,IAA9BS,EALoB,KAKZC,EALY,KAMpBC,EAAmBC,qBAAWC,KAA9BF,gBANoB,4CAQ3B,4BAAAG,EAAA,sEAC4BC,aAAaC,QAAQ,SADjD,cACQC,EADR,gBAEQrB,EAAOsB,aAAaD,GAAaE,MAAK,YAAmB,IAAjBC,EAAgB,EAAhBA,KAAMb,EAAU,EAAVA,KAClDH,EAASgB,GACTV,EAAUO,GACVT,EAAQD,GACRL,GAAW,MANf,4CAR2B,sBAkB3BmB,qBAAU,YAlBiB,mCAmBzBH,KACC,IAEH,IAAMI,EAAc,uCAAG,WAAMF,GAAN,2CAAAN,EAAA,sEACAC,aAAaC,QAAQ,SADrB,cACfP,EADe,OAEfc,EAAaR,aAAaC,QAAQ,aAGlCQ,EAUFJ,EAVFK,GACAC,EASEN,EATFM,MANmB,EAejBN,EARFO,KACEC,EARiB,EAQjBA,KACeC,EATE,EASjBC,cACcC,EAVG,EAUjBC,aACiBC,EAXA,EAWjBC,gBACeC,EAZE,EAYjBC,cACaC,EAbI,EAajBC,YAIEC,EAAWhB,GAAc,CAACK,OAAMF,SAEhCc,EAAU,CACdC,WAAYb,EAAKc,MAAM,KAAK,GAC5BC,UAAWf,EAAKc,MAAM,KAAK,IAAM,GACjCb,SACAE,OACAI,OAAQA,GAAU,GAClBF,UACAI,YA1BmB,mBAgCTzC,EAAOgD,aAAanC,EAAQ8B,EAAUC,GAhC7B,wBA+BVf,EA/BU,EA+BjBL,KAAOK,GA/BU,UAiCb7B,EAAOiD,YAAYpB,EAAID,EAAOE,GAjCjB,QAkCnBpB,GAAa,GACbK,EAAgB,EAAGF,GAnCA,kDAqCnBqC,QAAQC,IAAR,MArCmB,0DAAH,sDAkDdC,EAAO,CAAC3C,YAAWF,QAAOF,UAASQ,UAEzC,OACE,kBAAC,IAAD,CAAQV,SAAUA,GACV,yBAAKkD,MAAO,CAACC,QAAQ,UAE3B,kBAAC,IAAD,CAAKC,MAAM,SACX,kBAAC,IAAD,iBACMH,EADN,CAEEI,eAAgB,SAAAC,GAAI,OAlBGC,EAkBsBD,OAjBjDzD,EAAOwD,eAAeE,EAAQ7C,GAAQU,MAAK,YAAmB,IAAjBC,EAAgB,EAAhBA,KAAMb,EAAU,EAAVA,KAC3CgD,EAAQnC,EAAKoC,QAAO,SAAC1C,EAAG2C,GAAJ,OAAU3C,EAAI2C,EAAEC,WAAU,GACpD/C,EAAgB4C,EAAO9C,GACvBL,EAASgB,GACTZ,EAAQD,MALiB,IAAA+C,OAoBvBrD,IAAYI,GACZ,kBAAC,IAAD,iBAAiBE,EAAjB,CAAuBe,eAAgBA","file":"component---src-pages-cart-js-58d7672c550aa750a214.js","sourcesContent":["/* eslint-disable camelcase */\nimport React, {useState, useContext, useEffect} from 'react'\nimport SEO from '../components/SEO'\nimport CartItemList from '../components/CartItemList'\nimport CartSummary from '../components/CartSummary'\nimport CartContext from '../components/Context/CartContext'\nimport Layout from '../components/Layout'\n\nconst Moltin = require('../../lib/moltin')\n\nconst Cart = ({location}) => {\n  const [loading, setLoading] = useState(true)\n  const [items, setItems] = useState([])\n  const [completed, setCompleted] = useState(false)\n  const [meta, setMeta] = useState({})\n  const [cartId, setCartId] = useState({})\n  const {updateCartCount} = useContext(CartContext)\n\n  async function getCartItems() {\n    const cartIdLocal = await localStorage.getItem('mcart')\n    await Moltin.getCartItems(cartIdLocal).then(({data, meta}) => {\n      setItems(data)\n      setCartId(cartIdLocal)\n      setMeta(meta)\n      setLoading(false)\n    })\n  }\n\n  useEffect(() => {\n    getCartItems()\n  }, [])\n\n  const handleCheckout = async data => {\n    const cartId = await localStorage.getItem('mcart')\n    const customerId = localStorage.getItem('mcustomer')\n\n    const {\n      id: token,\n      email,\n      card: {\n        name,\n        address_line1: line_1,\n        address_city: city,\n        address_country: country,\n        address_state: county,\n        address_zip: postcode,\n      },\n    } = data\n\n    const customer = customerId || {name, email}\n\n    const address = {\n      first_name: name.split(' ')[0],\n      last_name: name.split(' ')[1] || '',\n      line_1,\n      city,\n      county: county || '',\n      country,\n      postcode,\n    }\n\n    try {\n      const {\n        data: {id},\n      } = await Moltin.checkoutCart(cartId, customer, address)\n      await Moltin.payForOrder(id, token, email)\n      setCompleted(true)\n      updateCartCount(0, cartId)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const handleRemoveFromCart = itemId => {\n    Moltin.removeFromCart(itemId, cartId).then(({data, meta}) => {\n      const total = data.reduce((a, c) => a + c.quantity, 0)\n      updateCartCount(total, cartId)\n      setItems(data)\n      setMeta(meta)\n    })\n  }\n\n  const rest = {completed, items, loading, cartId}\n\n  return (\n    <Layout location={location}>\n            <div style={{padding:'100px'}}>\n\n      <SEO title=\"Cart\" />\n      <CartItemList\n        {...rest}\n        removeFromCart={item => handleRemoveFromCart(item)}\n      />\n      {!loading && !completed && (\n        <CartSummary {...meta} handleCheckout={handleCheckout} />\n      )}\n      </div>\n    </Layout>\n  )\n}\n\nexport default Cart\n"],"sourceRoot":""}